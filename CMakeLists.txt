CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(detours LANGUAGES C CXX)

MACRO(GET_WIN32_WINNT version)
    IF(WIN32 AND CMAKE_SYSTEM_VERSION)
		SET(ver ${CMAKE_SYSTEM_VERSION})
		STRING(REGEX MATCH "^([0-9]+).([0-9])" ver ${ver})
		STRING(REGEX MATCH "^([0-9]+)" verMajor ${ver})
		# Check for Windows 10, b/c we'll need to convert to hex 'A'.
		IF("${verMajor}" MATCHES "10")
			SET(verMajor "A")
			STRING(REGEX REPLACE "^([0-9]+)" ${verMajor} ver ${ver})
		ENDIF("${verMajor}" MATCHES "10")
		# Remove all remaining '.' characters.
		STRING(REPLACE "." "" ver ${ver})
		# Prepend each digit with a zero.
		STRING(REGEX REPLACE "([0-9A-Z])" "0\\1" ver ${ver})
		SET(${version} "0x${ver}")
    ENDIF()
ENDMACRO()

SET(LIB_MAJOR_VERSION "4")
SET(LIB_MINOR_VERSION "0")
SET(LIB_PATCH_VERSION "1")
SET(LIB_VERSION_STRING "${LIB_MAJOR_VERSION}.${LIB_MINOR_VERSION}.${LIB_PATCH_VERSION}")

# compile in release with debug info mode by default
IF(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF()

FILE(GLOB detours_src
    ${CMAKE_CURRENT_LIST_DIR}/src/*.h
    ${CMAKE_CURRENT_LIST_DIR}/src/*.hpp
    ${CMAKE_CURRENT_LIST_DIR}/src/detours.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/modules.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/disasm.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/image.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/creatwth.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/disolx86.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/disolx64.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/disolia64.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/disolarm.cpp
    ${CMAKE_CURRENT_LIST_DIR}/src/disolarm64.cpp
)

SET(DETOURS_COMPILE_DEFINITIONS)
SET(DETOURS_COMPILE_OPTIONS)

IF(ENABLE_VERBOSELOG)
    LIST(APPEND DETOURS_COMPILE_DEFINITIONS ENABLE_VERBOSELOG)
ENDIF(ENABLE_VERBOSELOG)

IF(WIN32)
	IF(MSVC_VERSION GREATER_EQUAL 1700)
		LIST(APPEND DETOURS_COMPILE_DEFINITIONS DETOURS_CL_17_OR_NEWER)
	ENDIF(MSVC_VERSION GREATER_EQUAL 1700)
	GET_WIN32_WINNT(ver)
	MESSAGE(STATUS "Windows OS Version: ${ver}")
	IF(ver EQUAL 0x0700)
		LIST(APPEND DETOURS_COMPILE_DEFINITIONS _USING_V110_SDK71_)
		LIST(APPEND DETOURS_COMPILE_DEFINITIONS DETOURS_WIN_7)
	ENDIF(ver GREATER_EQUAL 0x0700)
	LIST(APPEND DETOURS_COMPILE_DEFINITIONS "_WIN32_WINNT=${ver}")
ELSE(WIN32)
    MESSAGE(FATAL_ERROR "Only Win32 platforms are supported.")
ENDIF(WIN32)

IF("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
	LIST(APPEND DETOURS_COMPILE_DEFINITIONS "DETOURS_TARGET_PROCESSOR=X64")
	LIST(APPEND DETOURS_COMPILE_DEFINITIONS DETOURS_X64)
	LIST(APPEND DETOURS_COMPILE_DEFINITIONS DETOURS_64BIT)
ELSE("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
	LIST(APPEND DETOURS_COMPILE_DEFINITIONS "DETOURS_TARGET_PROCESSOR=X86")
	LIST(APPEND DETOURS_COMPILE_DEFINITIONS DETOURS_X86)
ENDIF("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")

LIST(APPEND DETOURS_COMPILE_DEFINITIONS "DETOURS_VERSION=0x4c0c1")
LIST(APPEND DETOURS_COMPILE_DEFINITIONS WIN32_LEAN_AND_MEAN)

LIST(APPEND "_CRT_SECURE_NO_WARNINGS=1")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")

ADD_LIBRARY(detours_static STATIC ${detours_src})

TARGET_COMPILE_DEFINITIONS(detours_static PUBLIC ${DETOURS_COMPILE_DEFINITIONS})
TARGET_COMPILE_OPTIONS(detours_static PUBLIC ${DETOURS_COMPILE_OPTIONS})